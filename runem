#!/usr/bin/env python2.7

##################################################################################
#-*- coding: utf-8 -*-
# 
# Filename: runem.py
#
# Copyright (C) 2013 -  You-Tang Lee (YodaLee) <lc85301@gmail.com>
# All Rights reserved.
#
# This file is part of project: runem.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
##################################################################################

import sys
import os.path
import subprocess
import shutil
import smtplib
import getpass
import time
from email.mime.text import MIMEText
from optparse import OptionParser,make_option
from optparse import OptionParser,make_option

def getmail():
	"""get user email if ~/.runem is exist"""
	setting = ".runem"
	filefullname = os.path.expanduser("~") + "/" + setting
	mailfile = None
	mail = ""
	try:
		mailfile = open(filefullname, mode="r")
		mail = mailfile.readline()
	except IOError:
		pass
	finally:
		if mailfile is not None:
			mailfile.close()
	return mail

def sendmail(filename=""):
	"""get mail then sendmail"""
	sender = "lc85301@gmail.com"
	receiver = getmail()

	if receiver == "":
		return 0
	# open smtp session
	session = smtplib.SMTP('smtp.gmail.com', 587)
	session.ehlo
	session.starttls()
	session.ehlo
	session.login(account, password)

	# prepare the send message
	msg = MIMEText("Your EM simulation of {0} is over. Have a good day.".format(filename))
	msg['Subject'] = "EM simulation is over"
	msg['From'] = sender
	msg['To'] = receiver

	# send the message
	session.sendmail(sender, [receiver], msg.as_string())
	session.quit()

def startmonitor(filename=""):
	"""start the monitor process"""
	pid = getpid(filename)
	print(pid)
	print(filename)
	# call runem -m to monitor the em process
	cmd = "echo 'runem -m {0} -f {1}'".format(pid, filename)
	cmd2 = "at now +0 minutes"
	p1 = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
	p2 = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=p1.stdout)

def monitor_pid(pid, filename=""):
	"""Monitor pid, then send message"""
	POLL_INTERVAL = 10
	#: Get process cmdline
	try:
		with open("/proc/%d/cmdline" % pid) as f:
			cmd = f.read().split('\x00')
	except IOError:
		self.fatal('process %d does not exists' % pid)
	while True:
		try:
			os.kill(pid, 0)
		except OSError:
			break
		time.sleep(POLL_INTERVAL)
	sendmail(filename)

def setmail():
	"""allow user input mail and save into ~/.runem"""
	setting = ".runem"
	mail = raw_input("Please input your email address: ")
	filepath = os.path.expanduser("~") + "/" + setting
	mailfile = None
	try:
		mailfile = open(filepath , mode="w")
		mailfile.write(mail)
	except IOError:
		pass
	finally:
		if mailfile is not None:
			mailfile.close()

def getpid(filename):
	"""using ps to find the em simulation pid just called"""
	username = getusername()
	pid_list = []
	# wait 1 second, let ps refresh, and em shows
	# I once remove sleep and ps -elf didn't get em process LOL
	cmd = "sleep 3 ;ps -elf"
	p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
	stdout, stderr = p.communicate()
	#stdout = p.stdout.read().decode("utf-8").split('\n')
	stdout = stdout.decode("utf-8").split('\n')
	for line in stdout:
		linesplit = line.split()
		if (filename in line) and (username in line) and ("grep" not in line):
			pid_list.append(line.split()[3])
	# assume the maximum is the em process, need modification
	return max(pid_list)

def getusername():
	"""get user name, to grep em process"""
	return getpass.getuser()

def run_em(filename):
	"""run filename em simulation"""
	if not filename.endswith(".son"):
		sys.stderr.write("not a valid sonnet simulation file\n")
		sys.exit(1)
	
	if not os.path.isfile(filename):
		sys.stderr.write("the simulation file doesn't exist\n")
		sys.exit(1)
	#the file path of the simulation file
	pathname = os.path.dirname(os.path.abspath(filename))
	rawfilename = os.path.basename(filename)[:-4]
	print(pathname)
	print(rawfilename)
	
	# if exist, remove the old running log directory
	# otherwise em will stop simulation
	setting="{0}/sondata/{1}".format(pathname, rawfilename)
	if os.path.isdir(setting):
		shutil.rmtree(setting)
	
	# now run the em simulation using em and "at" command
	cmd = "echo 'em -v {0}'".format(filename)
	cmd2 = "at now +0 minutes"
	p1 = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
	p2 = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=p1.stdout)

# parse option 
option_list = [
	make_option("-s", "--set", action='store_true',dest='setmail', default=False, help="set your e-mail address"),
	make_option("-m", "--monitor", action='store', dest='pid', type=int, default=0, help="monitor process and send mail after process over"),
	make_option("-f", "--filename", action='store', dest='filename', default="", help="the filename currently running")
]
parser = OptionParser(usage = "Usage: runem emfilename", option_list=option_list)
options,args = parser.parse_args()

if options.setmail:
	setmail()
	sys.exit(0)
elif options.pid != 0:
	monitor_pid(options.pid, options.filename)
else:
	if len(sys.argv) != 2:
		parser.print_usage()
		sys.exit(1)
	filename = sys.argv[1]
	run_em(filename)
	startmonitor(os.path.basename(filename))
